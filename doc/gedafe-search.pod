=head1 NAME

gedafe-search - Searching in gedafe.

=head1 STATUS

good enough, but could be better.
Parsed searching requires the Parse::RecDescent module.

=head1 DESCRIPTION

The search field above a row-listing in gedafe comes in two
flavours:

=over

=item Traditional

You can find out if you have Gedafe Traditional Searching 
by looking for a pull-down list next to the search field. 
It should contain the column names for the view you are 
looking at.

Traditional searching is easy. Just select a column and type
what the values should match next to it.

The rest of this document will be about parsed searching.

=item Parsed

Gedafe Parsed Searching is a more powerful way of selecting
the rows you want.
It requires the Parse::RecDescent module to make sense of 
user input.
You know you have Gedafe Parsed Searching when there is
no pull-down list next to the search field anymore.

To enable parsed searching you can set
 
 parsed_search => 1

in the Start command of your Gedafe CGI script.

=back

=head1 USAGE

The search parser will try to understand your command and
transform it into a query that the database can understand.

There are a few simple conventions and then you can make it
as complicated as you would like.


=over

=item WHERE

If you want to do your own SQL you can start your
command with "where" and it will be passed to the 
database as is... This is for the people that
want to do difficult things.

=item Column names

columns can be addressed by their description, their
column number or their database name.

Example:
  Foo = bar           
	(if Foo is the description for a column)

  footable_foo = bar  
	(assuming that footable_foo is a column)

  1 = bar		    
	(find bar in the first column)

=item All columns

The first 'right hand side' of an expression that the
parser encounters will be matched against all columns:
Just entering plain

  foo

would result in finding foo in any column.
Compound 'right hand sides' will work the same way:

foo or bar

would result in finding foo or bar in any column.

=item Compound statements

Just like the rest of Perl this parser is mostly a 
Do What I Mean system.
Commands like:

  tree = apple or banana

gives you all trees that have apples or trees that
have bananas. INSTEAD of giving you a couple of 
bananas and a few apple trees.

Rules:

a = b or c  => (a = b) or ( a = c)

a = b or c = d => (a = b) or (c = d)

a = b or c or d = e  => (a = b) or (a = c) (d = e)

You will learn to love this in time... trust me :-)

=item Implicit OR

When no operator is specified to link 
'right hand sides' together an OR is assumed.

foo bar

is equivalent to

foo or bar


=item Operators

These operators are supported:


Operator:	What it does:

----------------------------------------

 ==	-> 	compare char by char

 >= 	-> 	>=

 <= 	->	<=

 ~* 	->	=~

 =~	->	=~

 > 	->	>

 < 	->	<

 =	->	finds needle in haystack 

 like	->	finds needle in haystack



=back

=head1 Parenthesis and operator precedence.

I'm a lazy @#$$!@12. This parser doesn't do parenthesis
or operator precedense.
Please use the WHERE syntax.
If you are one of my Comp. Sci. professors please have
mercy on me... I wrote this thing in a few hours.

=head1 Bytea columns

Unfortunately we can't search bytea columns yet.


=head1 COPYRIGHT

Copyright (c) 2004 Freek Zindel, All rights reserved.


=head1 LICENSE

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

=head1 AUTHOR

S<Freek Zindel E<lt>freek@zindel.nlE<gt>>

=head1 THANKS

Many thanks to Damian Conway for constructing the Parse::RecDescent.


=head1 NAME

gedafe-sql - Database Structure for Gedafe

=head1 SYNOPSIS

Gedafe is a generic web front-end to PostgreSQL. Generic means in this
context that Gedafe does not know anything about the structure or
contents of the database it is presenting.

The idea is that Gedafe looks at a database and presents it on the web.
Because Gedafe is no AI it expects the database structure and naming to
follow certain rules.

It is also important to note that Gedafe does not impose any
restrictions on to what a user can do with a database (this is what
all front-ends should do but alas ...) All consistency and permission
rules must be checked on the back-end side of the database. PostgreSQL
offers excellent support for this kind of checks through referential
integrity constraints, rules, triggers and stored procedures.

=head1 NAMING RULES

=head2 Unique Field Names

Each field in the user defined tables has a unique name. This
simplifies writing queries because there is no need for fully
qualified field naming.  The unique names have to be built by
appending the field name to the table name with an underscore.

Example:

 CREATE TABLE customer (
   customer_name TEXT, 
   customer_age  INT,
   customer_address TEXT);

=head2 Non Speaking Unique ID

Each table defines a B<unique>, B<non speaking>, B<numeric>
I<table>B<_id> field.  It is best to use an auto-increment counter
for this field.

If a unique ID for human consumption is required, it must be
called I<table>B<_hid>.

Example:

 CREATE TABLE customer (
   customer_id SERIAL NOT NULL PRIMARY KEY,
   customer_hid TEXT,
   customer_name TEXT, 
   customer_age INT,
   customer_address TEXT);

=head2 Table and Field Naming

For the benefit of a friendly presentation, each field and table in
the database can have a description. Descriptions are added using the
B<COMMENT> command.

Example:

 COMMENT ON TABLE customer IS 'Customers';
 COMMENT ON COLUMN customer.customer_hid 'C Number';

=head1 PRESENTATION

=head2 Presentation View

When listing the contents of a table, the front-end uses "C<SELECT *
FROM> I<table>" unless there is a view called I<table>C<_list>
in which case the records are pulled from this view.  The reason for
this is that tables containing references to tuples from other tables
might not be very presentable. The users don't want to see B<*_id>
fields. They want the corresponding B<*_HID> field from the referenced
table or maybe even more. Another reason for creating a B<*_list> view
may be that you do not want to present ALL records or fields to a
user.

The first column of a B<*_list> view must always be the B<*_id> field
from original table. This column does not get displayed if there is a
B<*_hid> column as well. The other column names should match their
original counter part unless they contain calculated data.

Example:

 CREATE VIEW absence_list AS
   SELECT absence_id, pers_hid, absty_hid, absence_start, 
          absence_end, absence_days, absence_desc
   FROM absence,absty,pers 
   WHERE absence_pers=pers_id 
         AND absence_absty=absty_id 
         AND NOT pers_virt;

A B<*_list> view can contain rows which do not correspond to rows in
the original table. These rows must have the value B<NULL> in the
B<*_id> column. 'Editing' the data of such a row from the front-end
causes a row to be inserted into the database. Defaults for the new
row are taken from the edited NULL-row.

You may want to pre-sort the contents of a view. Unfortunately
PostgreSQL does not allow to ORDER views. However, you can create a column
in your view called B<meta_sort> which the front-end will use to sort
the contents of the view as long as there are no other sorting
instructions present.

You can set a COMMENT for each field of a B<*_list> view, this comment will
then be taken as column head. If you do not define a special comment, but
the name of the list field equivalent to its parent table, then the COMMENT
from the parent table field will be used. The same is true if the list field
name matches the name of any other commented table field in the database.

=head2 The B<meta_tables> table

For some tables you may want to provide additional information to
optimize their use in the Front-end.

 CREATE TABLE meta_tables (
    -- Table Name
    meta_tables_table       NAME NOT NULL PRIMARY KEY,
    -- Attribute
    meta_tables_attribute   TEXT NOT NULL,
    -- Value
    meta_tables_value       TEXT
 );

The additional information is specified in attribute/value pairs for that
table. This table must exist, even if you don't use it. The following
attributes are at the moment defined:

=over 2

=item *

filterfirst

If a table tends to be big, it is possible to suggest a field to filter on
before an table is displayed. This is done by specifying an appropriate
field name as value for this attribute.

Note that the specified field must be part of the table or the corresponding
B<*_list> view.

=item *

hide

If the value is set to '1', the table won't be shown in the frontend.

=back
 
=head2 The B<meta_fields> table

For most fields is is possible to determine a presentation mode
from the data type of the field. For some fields this is not
possible and additional information must be provided. This is done through the
B<meta_fields> table. Every database must have a B<meta_fields> table.
It may be empty if no special information has to be provided.

 CREATE TABLE meta_fields (
    -- Table Name
    meta_fields_table       NAME    NOT NULL,
    -- Field Name
    meta_fields_field       NAME    NOT NULL,
    -- Attribute
    meta_fields_attribute   TEXT    NOT NULL,
    -- Value
    meta_fields_value       TEXT
 );

As for meta_tables, the additional information is specified in attribute/value pairs for that
field. The following attributes are defined:

=over 2

=item *

widget

Use this special widget for the edit form. At the moment only I<area> can be
specified, which makes Gedafe select a TEXTAREA widget for this field, such that
longer amounts of text can be entered.

=item *

copy

If set to '1', the data will be copied while adding entries from one form to
the next.

=item *

sortfunc

If you have a column which contains names like 'von Burg' or 'di Alfredi'
and you want the column sorted by the second word, you can create a function
which converts the name into a string suitable for sorting. The name of this
function must be given as value for this attribute.

=back

=head2 The Combo-box

When editing fields that are a reference to a row in another table it is
useful to have some help in filling out the field. Best is to provide
a list of possible values. The widget used to present this information
to the user is called combo-box. In order to make this possible, each
table which gets referenced by another table must be accompanied by a
special view called I<table>B<*_combo>. This view must have two
columns one called B<id> and one called B<text>. The B<id> column
contains the value a user might want to enter in the field containing
the reference. If the table has an I<table>B<_hid> column then
B<id> values must be taken from there instead of the standard
I<table>B<_id> column. The reasoning behind this is that even if
there is no combo-box, the user should be able to enter references
using I<table>B<_hid> values whenever possible. In order not to
create an incongruence the combo-box must then also provide the
I<table>B<_hid>.

If you want to order the contents of the combo-box, then this can be
done using an extra B<meta_sort> column as explained above. By
default, combo-boxes get sorted by the contents of their B<text>
column.

Example:
 
 CREATE VIEW gender_combo AS
    SELECT gender_hid  AS id, 
           gender_name AS text 
    FROM gender;

 CREATE VIEW proj_combo AS
    SELECT proj_id                               AS id, 
           proj_name || ', ' || pers_hid         AS text,
           proj_popularity(proj_id) || proj_name AS meta_sort 
    FROM proj, pers 
    WHERE proj_pers=pers_id and proj_active=true;

The last example uses a custom function proj_popularity() which calculates
a project popularity value which is then used as sort key in order to get
the most popular projects first in the combo box.

=head1 REPORTS

Analog to the B<*_list> views you can create as many B<*_rep> views as
you want, the only condition being that their names end in B<_rep>. This
can be used for simple reporting. For more complex reports you may
want to check out our B<PearlReports> module.

Example:

 CREATE VIEW absence_rep AS
    SELECT to_char(absence_start,'YYYY') as year,
           pers_hid, absty_hid, sum(absence_days) as days
    FROM absence, pers, absty
    WHERE absence_pers=pers_id 
          AND absence_absty=absty_id AND NOT pers_virt
    GROUP BY pers_hid, absty_hid, year;

=head1 COPYRIGHT

Copyright (c) 2000 ISG / D-ELEK / ETH Zurich, All rights reserved.

=head1 LICENSE

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

=head1 AUTHOR

Tobias Oetiker E<lt>oetiker@ee.ethz.chE<gt>

David Schweikert E<lt>dws@ee.ethz.chE<gt>

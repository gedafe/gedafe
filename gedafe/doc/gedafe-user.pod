=head1 NAME

gedafe-user - the Generic Database Frontend (Gedafe) User-Manual

=head1 DESCRIPTION

Gedafe (the Generic Database Frontend) is a web-based database frontend
that is database-application independent. That means that the (perl) code
doesn't contain any information about what tables are present in the
database, how the data is organized or how the forms should be made.

This is made by using the high sophistication of PostgreSQL that permits to
define not only the format of the various tables for the data but also how
they should be used. It is for example possible to define in the database
the relational constraints, such that the database integrity, independently
from the frontend used, is guaranteed.

The added advantage of this "application in the database" approach is that
we have to write one time the code to handle for example a form for adding
a record though a form, then it works for every table in the database. Gedafe
gathers information about the database at startup and generates the whole
interface dynamically.

Finally, it is much more easier to write new database applications: you just
have to define a new database. No need to touch the perl code.

=head2 Features

Gedafe has the following "special" features:

=over 4

=item *

I<Generic> frontend to the database. No need to change the CGI script when
developing a new database application.

=item * 

The I<authentication> is done only at the database-level, is transparent to the
requested URL (after a login you get the page you requested initially) and uses
cookies that expire server-side.

=item *

Almost no HTML is used in the code. External little files containing the HTML
are used as template. That makes for an I<easily changeable look>.

=item *

POST is used only for data that modifies the database. Every view is encoded in
the URL, which makes them storable as bookmarks.

=item *

After a form to enter for example a new record you arrive directly at the list
view where you were before that form. I<No intermediate pages> are used when
possible.

=item *

I<Double form protection>. It is not possible to submit erroneously two times
the same form.  Because of the fact that no intermediate pages are used, often
views are the result of a POST request, which is automatically resent on some
Netscape versions when a reload is made. Without a double form protection, the
data would be entered two times in the database.

=back

=head1 INSTALLATION

The structure of the Gedafe distribution is as follows:

 .
 |-- bin              binaries (gedafed daemon)
 |-- doc              documentation
 |-- lib              
 |   `-- perl
 |       `-- Gedafe    gedafed main source
 `-- example
     |-- templates    HTML templates
     |-- demo.cgi     demo-application  script
     `-- demo.sql     PostgreSQL script to initialize the
                      demo-application database

The only thing you have to do is ensure (in the application script) that
lib/perl of the Gedafe distribution is found by perl and start the gedafed
daemon (you can use the script gedafed-ctl to start it with SYSV-init).

=head2 The Application Script

Gedafe is actually a library. The application just calls the 'Start' function
from that library to start it up. This is the script that should be called
from the web. It should look as follows:

 #!/usr/sepp/bin/speedy -w
 
 use lib "/usr/local/gedafe/lib/perl";
 
 use Gedafe::Start;
 
 Start(
 	app_site       => 'mysite.com:8000',
 	app_path       => '/cgi-bin/demo',
 	db_datasource  => 'dbi:Pg:dbname=demo',
 	list_rows      => 15,
 	admin_user     => 'admin',
 	templates      => '/usr/local/gedafe/templates/demo',
 	documentation_url => 'http://mysite.com/demo-docs',
 );

Gedafe gathers information about the database structure at the first use. This
can take much time, so it is heavily suggested that you use a persistent perl
instance with for example I<speedy>. I<mod_perl> works also great, but you have
to be careful if you run multiple database applications, since if the same
persistent perl is used, the cached data of the applications will go in the
same global variable, which is certainly not what you want.

Very important in this script is the first 'use' statement. It should point to
where you have stored F<lib/perl> of the distribution. I<Start> starts the
application by specifying Gedafe configuration variables. The following
configuration variables are defined:

=over 20

=item app_site

Site-part of the URL where the application resides.

=item app_path

Path-part of the URL where the application resides.

=item db_datasource

DBI data-source string specifying the database.

=item list_rows

Default number of rows to show.

=item admin_user

Name of the administrator user. A tag is passed to the html templates when the
user is this one to for example change the background color.

=item templates

Directory where the html templates are stored (copy as a basis
F<example/templates>)

=item documentation_url

URL passed to the html templates where the documentation of the application is
stored.

=back

=head2 The gedafed Daemon

Gedafe uses an external process to manage session data called gedafed. This
daemon must be running to make Gedafe work. You can start it in the init phase
using the bin/gedafed-ctl script.

=head2 The Database

F<gedafe-sql.pod> describes how the database should be setup to work with
Gedafe.

=head1 USAGE

=head2 Authentication

Authentication is done with the help of gedafed. This daemon stores
user/password pairs using a random-generated "ticket", which is stored in a
cookie on the client side. To make these tickets more secure gedafed manages an
expiration on these tickets. Every time that ticket is used, it's expiration
is prolonged by a certain amount (configured in the script) of seconds. The
result is that if the database isn't accessed for a certain amount of time,
the ticket isn't anymore valid and login must be made.

The login screen is transparent to the page accessed: whenever a login is
needed, the login screen is first presented, after which the requested page is
shown.

=head2 Forms and Navigation

The navigation and general use of Gedafe should be straightforward. At the
beginning, you are presented with the "Entry" page that contains links to every
table to edit and every available report.

For forms, the guiding principle while designing Gedafe was 'POST is evil, use
it the less possible'. The reason for it is that if a generated page depends on
POST data, that page can't be stored in a bookmark and the browsers have
problems handling the reloading of pages obtained with a POST request. For that
reason, POST was used only for database-modifying actions that needed to
transfer large amounts of data.

=head2 HTML Layout

Almost no HTML is present in the perl code. The HTML is generated with the help
of Text::CPPTemplate, a very simple C-preprocessor-style templating system
included in the Gedafe distribution. The templates are taken from a directory
specified in the startup script with the 'templates' parameter.

The basic idea is that Gedafe places small "elements" of the page currently
being generated such as the header or the cell of a table by only specifying
variables (properties) of that element. Every element has always the following
minimal variables specified:

=over 10

=item PAGE

Name of the page (for example I<login>, I<entry> or I<list>).

=item ELEMENT

Name of the element (for example I<header> or I<td>).

=back

In addition to these, element-specific data such as I<DATA> for the I<td>
element must be defined. Text::CPPTemplate will then search for an appropriate
template to use and generate the HTML code. See L<Text::CPPTemplate(3)> for a
description of the syntax and how the templates are stored in files. See also
F<gedafe-templates.txt> for a description of what elements are used with what
variables.

=head2 Hidden features

=over 4

=item *

In the URL: C<listrows=nn> override the number-of-displayed-rows specified in
the startup script.

=item *

In the URL: C<theme=xxx> set the theme (templates will be loaded from that
subdirectory of the templates directory)

=item *

In the URL: C<reload=1> reset all the cached data. This is useful if you for
example change a template file or the structure of the database.

=item *

C<today> or C<yesterday> can be specified as search value for a 'Date' field.

=item *


Numbers can be entered as C<hh:mm> (for example C<0:10>). The C<mm> part will
be multiplied by 100/60 and added to C<hh>.

=back

=head2 Caching and Bookmarks

A difficulty that we encountered while developing Gedafe was the caching of
pages by the browser.  We have to control precisely when a page can be cached
and when not. The implementation is made with the C<refresh> URL parameter:
when it is set, the expiration of the page is set to some positive value,
meaning that the page can be cached, and when not available, the expiration is
negative, meaning that the page should not be cached. The value of C<refresh>
is a random number, that we can change to force a reload of the page.

A side-effect of this technique is that pages with C<refresh> in the URL are
not suitable to be stored as bookmarks, since you would then get always the
same cached version. For that reason, bookmarks should be always saved without
the C<refresh> parameter, such that a new version of the page is always
requested to the server. There is a link on every page, that you can drag to
store the currently viewed page.

=head1 FUTURE WORK

=over 4

=item *

Ports to other databases such as Ingres and Oracle.

=item *

We will probably change completely or improve the templating system, since it is very
primitive right now. A possibility is Template::Toolkit.

=item *

We will integrate PearlReports (by Tobias Oetiker <oetiker@ee.ethz.ch>, not yet
released) into Gedafe to allow generating with the HTML interface real reports
in HTML and perhaps also directly in PDF.

=item *

Internal code cleanup. We are evaluating if now that we have experience on how
to do such an application right from the beginning, a better implementation
could be gained through a rewrite.

=back

=head1 SEE ALSO

F<gedafe-sql.pod>, F<gedafe-templates.txt>

=head1 COPYRIGHT

Copyright (c) 2000 ETH Zurich, All rights reserved.

=head1 LICENSE

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

=head1 AUTHOR

David Schweikert <dws@ee.ethz.ch> and
Tobias Oetiker <oetiker@ee.ethz.ch>

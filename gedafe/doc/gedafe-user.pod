=head1 NAME

gedafe-user - the Generic Database Front-End (Gedafe) User-Manual

=head1 DESCRIPTION

Gedafe (the Generic Database Front-End) is a web-based database front-end
that is database-application independent. That means that the (perl) code
doesn't contain any information about what tables are present in the
database or how the data is organized.

This is only possible if a full-featured SQL dB server like PostgreSQL
is used as backend. PostgreSQL permits to define not only the format
of the various tables and fields, but also how tables are related to
each other. It is even possible to write powerful functions inside the
database which get executed as new data is accessed or
modified. Together, these features allow the implementation of data
integrity constraints inside the database itself.

The effect of this is, that the database server guarantees the
integrity of the database, independently from the software used to
access the database. A front-end can read all the integrity
constraints directly off the database and enforce them itself in order
to provide faster response to the user, but at the end of the day the
database server will only accept data which follow the rules defined
by the database programmer.

Overall, this approach makes the creation and maintenance of database
applications much simpler. New databases can be created on the
database server alone, using the language which is best suited for
this task: SQL. The front-end then comes almost for free.

=head2 Features

Gedafe has the following features:

=over 4

=item *

It is completely I<generic>. Gedafe does not need to know anything
about the structure or contents of the database it is working with.

=item * 

I<Authentication> is done at the database-level. 

=item *

It is URL transparent.  This means, you can directly access the URL of
the page you want to look at. If necessary, the login screen will pop
up and after a successful login you will be presented the page you
initially requested.

=item *

Almost no HTML is used in the front-end code. External template files
define the look and feel of pages.

=item *

POST is used only for data that modifies the database. Every page has
a distinct URL, which makes them storable as bookmarks (Deep Linking).

=item *

I<Double form protection>. The front-end prevents accidental repeated
submission of the same form. This is implemented using a unique serial
number for each form.

=item *

Using the PearlReports integration, is is possible to write custom multilevel
report modules (Pearls) available from the Gedafe webinterface.

=back

=head1 INSTALLATION

The structure of the Gedafe distribution is as follows:

 .
 |-- bin/             binaries (gedafed daemon)
 |-- doc/             documentation
 |-- lib/              
 |   `-- perl/
 |       |-- Gedafe/  gedafed main source
 |       |-- DBIx/    PearlReports (required for gedafe pearls)
 |       `-- Text/    CPPTemplates (required for gedafe screen layout)
 `-- example
     |-- templates/   HTML templates
     |-- mypearls/    Sample pearl report module
     |-- demo1.cgi    demo-application  script
     `-- demo1.sql    PostgreSQL script to initialize the
                      demo-application database

In order to start using gedafe you must ensure that F<lib/perl> of the
Gedafe distribution is found by F<perl> and start the F<gedafed>
daemon (you can use the script gedafed-ctl to start it with
SYSV-init).

=head2 The Application Script

Gedafe is actually a library. The application itself just calls the
'Start' function of the library, providing the necessary configuration
information as arguments. The application startup script should look
as follows:

 #!/usr/sepp/bin/speedy -w
 
 use lib "/usr/local/gedafe/lib/perl";
 
 use Gedafe::Start;
 
 Start(
 	db_datasource  => 'dbi:Pg:dbname=demo',
 	list_rows      => 15,
 	templates      => '/usr/local/gedafe/templates/demo',
 	documentation_url => 'http://mysite.com/demo-docs',
	show_row_count => 1,
        isearch        => '/place/in/the/webtree/for/isearch.jar',
        pearl_dir      => '/usr/local/gedafe/example/mypearls',
        oyster_dir      => '/usr/local/gedafe/example/myoysters',
    	list_buttons   => 'both',
	edit_buttons_left => 1,
 );

Gedafe gathers information about the database structure when it is
started.  This process can take a lot of time, it is therefor strongly
suggested that you use a persistent perl instance, for example
I<speedy>. I<mod_perl> works also great, but you have to be careful if
you run multiple database applications, since if the same persistent
perl is used, the cached data of the applications will go in the same
global variables, which is certainly not what you want.

Of course, you must specify the correct path name to your perl
interpreter in the first line of the script (unless you use a
webserver perl module).

Very important in this script is the first 'use' statement. It should
point to where you have stored F<lib/perl> of the
distribution. I<Start> starts the application by specifying Gedafe
configuration variables. The following configuration variables are
defined:

=over 20

=item db_datasource

DBI data-source string specifying the database.

=item list_rows

Default number of rows to show.

=item templates

The directory where the html templates are stored (you can use a copy
F<example/templates> as a basis for you local modifications).

=item documentation_url

URL passed to the html templates where the documentation of the
application is stored.

=item show_row_count

Options: [0,1] 
If set, show a count of total records returned by each select, along
with extra navigation links to skip to first and last pages of result set.
Since this produces slightly higher database overhead (an added
SELECT COUNT(*) for every SELECT), it is turned off by default.

=item isearch

Web-servers don't like Java archives (jar) to be down-loaded from cgi-bin
directory's. They will try to execute them instead. To resolve this,
you have to place the 'incremental search widget' (isearch) Java 
archive in a place where it can be down-loaded like any other file.
This item is used to point gedafe to the place where you have put the
isearch.jar. Please make sure that it is on the same server and 
preferably a relative address. Java security restrictions require this. 

=item list_buttons

Options: ['top','bottom','both','none']
This option acts on the buttons that appear with table or view lists, the
first,previous,add,next,last buttons.
Top selects only buttons above the list. 
Bottom selects only buttons below the list.
None removes all buttons, but doing so wouldn't make much sense.
When omitted the default is 'both'.

=item widget_dir

Name of a directory where gedafe should go looking for extra widgets.
See F<gedafe-widget.pod> for more information.

=item pearl_dir

Name of a directory where gedafe should go looking for pearls. Pearls are
object oriented perl modules which first display a data input screen and
then run a report off the database based on the entires given at the data
entry screen. See F<gedafe-pearls.pod> for more information.

=item oyster_dir

Name of a directory where gedafe should go looking for Oysters. Oysters are
object oriented perl modules which allow developers to implement 
mini-applications while concentrating on the task at hand rather than the
gotcha's of html-based software engineering.
See F<gedafe-oysters.pod> for more information.

=item schema

See "Schema Support"


=item "schema_search_path"

See "Schema Support"

=item "parsed_search"

When set to 1 enables the parsed way of searching even when
Parse::RecDescent is present on the system. See also: gedafe-search.pod


=item edit_buttons_left 

If set to 1, the buttons for edit, clone and delete are shown on
the left, which is useful for very wide tables.

=item edit_show_id 

F<edit_show_id> = 'edit' makes the id column visible in EDIT screens. 
(F<edit_show_id> = 'edit+add' makes the id column visible also in NEW screens.
This has the side effect of incrementing serial id's even if you
abort inserting a new value. Also the id jumps in steps of 2)
The id is always "read-only".  This can be used in two ways:

=over

=item *

The id column has a default, but you want to know the id value while editing
(or inserting) a record. 

=item * 

You want editable id values or you want to supply the id values by hand. 
This will not work. In this case we recommend to use a HID column.

=back

=back

=head2 The gedafed Daemon

Gedafe uses an external process called gedafed to manage session
data. This daemon must be running to make Gedafe work. You can start
it during the boot process of your server using the bin/gedafed-ctl
script.

=head2 The Database

F<gedafe-sql.pod> describes how the database should be setup to work with
Gedafe.

=head1 USAGE

=head2 Authentication

Authentication is done with the help of gedafed. This daemon stores
user/password pairs using a random-generated "ticket", which is stored
in a cookie on the client side. To make these tickets more secure
gedafed manages an expiration on these tickets. Every time that ticket
is used, it's expiration is prolonged by a certain amount of seconds
(configured in the script).  If the database isn't accessed for a
certain amount of time, the ticket is expired and a new login must be
made.

The login screen is transparent to the page accessed: whenever a login
is needed, the login screen is first presented, after which the
requested page is shown.

Warning: Gedafe will not work with blank passwords. If you want to do
anonymous logins, you may put the user in the url (as an additional
parameter, user=xxx&...) and the password sent to the database will be
'anonymous'.

=head2 Forms and Navigation

The navigation and general use of Gedafe should be straightforward. At the
beginning, you are presented with the "Entry" page that contains links to every
table to edit and to every available report.

For forms, the guiding principle while designing Gedafe was 'POST is
evil, use it the least possible'. The reason for it is that if a
generated page depends on POST data, that page can't be stored in a
bookmark and the browsers have problems handling the reloading of
pages obtained with a POST request. For that reason, POST was used
only for database-modifying actions where large amounts of data must
be transferred.

=head2 HTML Layout

Almost no HTML is used in the perl code. The HTML is generated with the help
of Text::CPPTemplate, a very simple C-preprocessor-style templating system
included in the Gedafe distribution. The templates are taken from a directory
specified in the startup script with the 'templates' parameter.

The basic idea is that Gedafe places small "elements" of the page currently
being generated such as the header or the cell of a table by only specifying
variables (properties) of that element. Every element has always the following
minimal variables specified:

=over 10

=item PAGE

Name of the page (for example I<login>, I<entry> or I<list>).

=item ELEMENT

Name of the element (for example I<header> or I<td>).

=back

In addition, element-specific data such as I<DATA> for the I<td>
element must be defined. Text::CPPTemplate will then search for an appropriate
template to use and generate the HTML code. See L<Text::CPPTemplate(3)> for a
description of the syntax and how the templates are stored in files. See also
F<gedafe-templates.txt> for a description of what elements are used with what
variables.

=head2 Postgres Schema support

It is possible to use schema support if Postgres is Version 7.2 or 
newer.  For database versions < 7.2 schema support is disabled. 
No test have be done yet if Postgres versions < 7.2 really work
after introdution of schema support.

A schema is a group of tables in postgres.  
You can order your tables by moving them in several schemas 
without changing views and select statements.

If you add more then one schema to your gedafe application, the
top of the Entry screen shows links into the other schemas instead of 
table links.

Schema support is activated with 2 optional config parameters for Start.pm.
These values are:

=over 10

=item "schema" 

defines the default schema, i.e. the schema we want to start in. 
Gedafe only shows you tables in the "current" schema. The current
schema is the default schema if defined else 'public'.
You can override the default schema with the URL parameter I<schema=>.

=item "schema_search_path" 

=back

Syntax: A comma separated list of single quoted schema names
like B<"'public','test">. Is ignored, if I<schema> is not set.

Defines the group of schemas we want to make accesible for
gedafe. To be exact, all tables are acessible by prefixing
their schema name (e.g. I<testschema.testtable> is table I<testtable>
in schema I<testschema>). 
You can use schema prefixes in sql commands, e.g. in views. But gedafe itself
does not prefix table names. To reference tables from more then the 'public'
schema, we have to put the schema names in a I<schema_search_path>.

When setting a I<schema_search_path>, you only will see links for tables in
the "actual" schema but you can access all tables within the search path by
their names as if they were in the current schema.

CAVEAT: Beware of name collisions.

Never put 2 tables with the same name in two schemas (inside your search
path), as the results can be hard to predict. Also always put I<'public'> in
your schema search path. Put the tables I<meta_fields> and I<meta_tables> in
the I<'public'> schema.  The effects of having several I<meta_fields> and
I<meta_tables> will be hard to predict.
 
=head2 Hidden features

=over 4

=item *

In the URL: C<list_rows=nn> override the number-of-displayed-rows specified in
the startup script.

=item *

In the URL: C<theme=xxx> set the theme (templates will be loaded from that
subdirectory of the templates directory)

=item *

In the URL: C<reload=1> reset all the cached data. This is useful, for
example, if you changed a template file or the structure of the database.

=item *

C<today> or C<yesterday> can be specified as search value for a 'Date' field.

=item *

Numbers can be entered as C<hh:mm> (for example C<0:10>). The C<mm> part will
be multiplied by 100/60 and added to C<hh>.

=item *

Some supporting perl modules are auto-detected and only used if they are
installed on the system gedafe is running on.  These are currently:

=over 4

=item -

Text::CSV_XS : for exporting data as comma-separated value (CSV) format; if not
installed, only the default tab-delimited format will be available for
exporting data.

=back

=back

=head2 Caching and Bookmarks

A difficulty that we encountered while developing Gedafe was the
caching of pages by the browser.  We have to control precisely when a
page can be cached and when not. The implementation is made with the
C<refresh> URL parameter: when it is set, the expiration of the page
is set to some positive value, meaning that the page can be cached. If
C<refresh> is not available, the expiration is negative, meaning that
the page should not be cached. The value of C<refresh> is a random
number, that can be changed to force a reload of the page.

A side-effect of this technique is that pages with C<refresh> in the URL are
not suitable to be stored as bookmarks, since you would then get always the
same cached version. For that reason, bookmarks should be always saved without
the C<refresh> parameter, such that a new version of the page is always
requested from the server. There is a link on every page, that you can drag to
store the currently viewed page.

=head1 TROUBLESHOOTING

=head2 Edit form is empty

When you get an empty form after selecting 'Edit' for a record, this could mean
that you didn't put the record *_id into the first column of the presentation
(*_list) view or the table (if there isn't a presentation view). Gedafe must
know the id of the record to edit and it does so by using the first column as
key. See the F<gedafe-sql.pod>, section 'Presentation View'.

=head1 SEE ALSO

F<gedafe-sql.pod>, F<gedafe-templates.txt>, F<Text::CPPTemplate>, F<gedafe-pearls.pod>,
F<DBIx::PearlReports>

=head1 COPYRIGHT

Copyright (c) 2000-2003 ETH Zurich, All rights reserved.

=head1 LICENSE

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

=head1 AUTHOR

S<Tobias Oetiker E<lt>oetiker@ee.ethz.chE<gt>>,
S<David Schweikert E<lt>dws@ee.ethz.chE<gt>>,
S<Fritz Zaucker E<lt>zaucker@ee.ethz.chE<gt>>,
S<Adi Fairbank E<lt>adi@adiraj.orgE<gt>>,
S<Freek Zindel E<lt>freek@zindel.nlE<gt>>
